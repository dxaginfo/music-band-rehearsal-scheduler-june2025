// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password_hash String
  first_name    String
  last_name     String
  phone_number  String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relations
  profile       UserProfile?
  bandMembers   BandMember[]
  createdBands  Band[]         @relation("BandCreator")
  attendances   Attendance[]
  availability  MemberAvailability[]
  rehearsalNotes RehearsalNote[]
  notifications  Notification[]
  createdRehearsals Rehearsal[] @relation("RehearsalCreator")
  createdSongs Song[] @relation("SongCreator")
  createdSetlists Setlist[] @relation("SetlistCreator")
  uploadedFiles SongFile[] @relation("FileUploader")
}

model UserProfile {
  id                     String   @id @default(uuid())
  user_id                String   @unique
  profile_image_url      String?
  bio                    String?
  instruments            Json    @default("[]")
  notification_preferences Json    @default("{}")
  time_zone              String
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  
  // Relations
  user                   User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Band {
  id          String    @id @default(uuid())
  name        String
  description String?
  logo_url    String?
  created_by  String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  creator     User      @relation("BandCreator", fields: [created_by], references: [id])
  members     BandMember[]
  venues      Venue[]
  rehearsals  Rehearsal[]
  songs       Song[]
  setlists    Setlist[]
  memberAvailability MemberAvailability[]
}

model BandMember {
  id        String    @id @default(uuid())
  band_id   String
  user_id   String
  role      String    // leader, member
  instruments Json     @default("[]")
  join_date DateTime  @default(now())
  status    String    // active, inactive
  
  // Relations
  band      Band      @relation(fields: [band_id], references: [id])
  user      User      @relation(fields: [user_id], references: [id])
  
  @@unique([band_id, user_id]) // Each user can only be a member of a band once
}

model Venue {
  id        String    @id @default(uuid())
  band_id   String
  name      String
  address   String?
  notes     String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  // Relations
  band      Band      @relation(fields: [band_id], references: [id])
  rehearsals Rehearsal[]
}

model Rehearsal {
  id               String    @id @default(uuid())
  band_id          String
  venue_id         String?
  title            String
  description      String?
  start_time       DateTime
  end_time         DateTime
  is_recurring     Boolean
  recurrence_pattern Json?     // null if not recurring
  created_by       String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  
  // Relations
  band             Band      @relation(fields: [band_id], references: [id])
  venue            Venue?    @relation(fields: [venue_id], references: [id])
  creator          User      @relation("RehearsalCreator", fields: [created_by], references: [id])
  attendances      Attendance[]
  setlist          Setlist?
  notes            RehearsalNote[]
}

model MemberAvailability {
  id           String    @id @default(uuid())
  user_id      String
  band_id      String
  day_of_week  Int?      // 0-6 for recurring weekly availability (0 = Sunday)
  start_time   String?   // HH:MM format
  end_time     String?   // HH:MM format
  is_recurring Boolean
  specific_date DateTime? // only used for non-recurring availability
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Relations
  user         User      @relation(fields: [user_id], references: [id])
  band         Band      @relation(fields: [band_id], references: [id])
}

model Attendance {
  id           String    @id @default(uuid())
  rehearsal_id String
  user_id      String
  status       String    // confirmed, declined, tentative, no_response
  notes        String?
  updated_at   DateTime  @updatedAt
  
  // Relations
  rehearsal    Rehearsal @relation(fields: [rehearsal_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])
  
  @@unique([rehearsal_id, user_id]) // One attendance record per user per rehearsal
}

model Song {
  id         String    @id @default(uuid())
  band_id    String
  title      String
  artist     String?
  duration   Int?      // duration in seconds
  notes      String?
  created_by String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  // Relations
  band       Band      @relation(fields: [band_id], references: [id])
  creator    User      @relation("SongCreator", fields: [created_by], references: [id])
  setlistSongs SetlistSong[]
  files      SongFile[]
}

model Setlist {
  id           String    @id @default(uuid())
  band_id      String
  rehearsal_id String?   @unique // Setlist can be linked to a rehearsal (optional)
  title        String
  notes        String?
  created_by   String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Relations
  band         Band      @relation(fields: [band_id], references: [id])
  creator      User      @relation("SetlistCreator", fields: [created_by], references: [id])
  rehearsal    Rehearsal? @relation(fields: [rehearsal_id], references: [id])
  setlistSongs SetlistSong[]
}

model SetlistSong {
  id         String    @id @default(uuid())
  setlist_id String
  song_id    String
  position   Int
  notes      String?
  
  // Relations
  setlist    Setlist   @relation(fields: [setlist_id], references: [id], onDelete: Cascade)
  song       Song      @relation(fields: [song_id], references: [id])
  
  @@unique([setlist_id, position]) // Ensure position is unique within a setlist
}

model SongFile {
  id          String    @id @default(uuid())
  song_id     String
  file_name   String
  file_url    String
  file_type   String
  uploaded_by String
  uploaded_at DateTime  @default(now())
  
  // Relations
  song        Song      @relation(fields: [song_id], references: [id])
  uploader    User      @relation("FileUploader", fields: [uploaded_by], references: [id])
}

model RehearsalNote {
  id           String    @id @default(uuid())
  rehearsal_id String
  user_id      String
  content      String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Relations
  rehearsal    Rehearsal @relation(fields: [rehearsal_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])
}

model Notification {
  id            String    @id @default(uuid())
  user_id       String
  type          String    // rehearsal_reminder, change_alert, comment, etc.
  content       String
  reference_id  String?   // Can be any ID (rehearsal, band, etc.)
  reference_type String?   // The type of the reference (rehearsal, band, etc.)
  is_read       Boolean   @default(false)
  created_at    DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [user_id], references: [id])
}