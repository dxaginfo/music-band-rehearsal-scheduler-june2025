version: '3.8'

services:
  # Node.js backend service
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: rehearsal-scheduler-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/rehearsal_scheduler
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    depends_on:
      - db
      - redis
    networks:
      - app-network
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules

  # React frontend service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: rehearsal-scheduler-client
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - app-network

  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    container_name: rehearsal-scheduler-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=rehearsal_scheduler
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: rehearsal-scheduler-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

# Persistent volumes
volumes:
  postgres_data:
  redis_data:

# Application network
networks:
  app-network:
    driver: bridge